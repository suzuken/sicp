(load "./s2.4.scm")
(load "./s2.5.scm")

; 2.82
;
; 多くの引数を持つ一般の場合にでも強制型変換が使えるよう、apply-genericをどのように一般化すればよいか。
;
;
; ans.
;
; 現状のapply-genericは2つの引数しか受け入れない。3つ以上の引数を受け取ると何も処理が行われないとうことに。
;
; すべての引数を第一引数の型、次に第二引数の型等などに強制変換を試みる、という戦略が（そして上の二引数版が）充分に一般的でない状況の例をあげよ。
; （ヒント: 表の中に試みられないなにか適当な混合型の演算がある場合を考えよ）
;
; 2013/03/11 の読書会での内容加筆
;
; 同じ型に導くことで計算できなくなる例を探せば良い。
; たとえば以下のような場合。
;
; * 型: 行列、ベクトル、整数
;
; があるとする。そこで以下の積を考える。
;
; ('mul matrixA matrixB intA)
;
; ここで、matrixAは2x3の行列、matrixBは3x2の行列だと仮定しよう。
; apply-genericを第一引数の型に強制変換しようとすると、intAをmatrix型にしなければならなくなる。
; たとえば以下の様な変換が考えられるだろう。
;
; (define intA 3)
;
; だとすると
;
; 3 0 0
; 0 3 0
; 0 0 3
;
; のような行列に変換する。（3 * Iとするのは自然だろう）
;
; すると以下のようになる
;
; 1 2 3    1 2   3 0 0
; 4 5 6  * 3 4 * 0 3 0
;          5 6   0 0 3
;
; これは計算出来ない。本来であれば以下のようにするはずだ。
;
;
; 1 2 3    1 2
; 4 5 6  * 3 4 * 3
;          5 6
;
; したがって、敢えて型変換をすることにより、積を導くことができなくなってしまった、といえる。
