; q4.44
(define amb '())
(define (require p)
  (if (not p) (amb)))

(define (member obj lst)
  (cond ((null? lst) false)
        ((eq? obj (car lst)) lst)
        (else (member obj (cdr lst)))))

(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

(define (eight-queen)
  (let ((first (amb 1 2 3 4 5 6 7 8)))
    (let ((second (amb 1 2 3 4 5 6 7 8)))
      (require (distinct? (list first second)))
      (let ((third (amb 1 2 3 4 5 6 7 8)))
        (require (distinct? (list first second third)))
        (let ((forth (amb 1 2 3 4 5 6 7 8)))
          (require (distinct? (list first second third forth)))
          (let ((fifth (amb 1 2 3 4 5 6 7 8)))
            (require (distinct? (list first second third forth fifth)))
            (let ((sixth (amb 1 2 3 4 5 6 7 8)))
              (require (distinct? (list first second third forth fifth sixth)))
              (let ((seventh (amb 1 2 3 4 5 6 7 8)))
                (require (distinct? (list first second third forth fifth sixth seventh)))
                (let ((eighth (amb 1 2 3 4 5 6 7 8)))
                  (require (distinct? (list first second third forth fifth sixth seventh eighth)))
                  (list (list 'first first)
                        (list 'second second)
                        (list 'third third)
                        (list 'forth forth)
                        (list 'fifth fifth)
                        (list 'sixth sixth)
                        (list 'seventh seventh)
                        (list 'eighth eighth)))))))))))

(eight-queen)
try-again
